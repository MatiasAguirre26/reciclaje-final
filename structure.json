{
  "src": {
    "app": {
      "api": {
        "points": {
          "[userId]": {
            "route.js": "import { NextResponse } from \"next/server\";\nimport { cookies } from \"next/headers\";\n\nexport async function GET(req, {params}) {\n  const { userId } = params;\n  const cookieStore = cookies();\n  const token = cookieStore.get('token')?.value;\n  const tokenJson = JSON.parse(token);\n  const response = await fetch(`${process.env.BACKEND_API_URL}/users/${userId}/points`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${tokenJson}`,\n    },\n  });\n  const data = await response.json();\n  return NextResponse.json(data);\n}\n\n//export async function PUT(req, {params}) {\n//  const { userId } = params;\n//  const cookieStore = cookies();\n//  const token = cookieStore.get('token')?.value;\n//  const tokenJson = JSON.parse(token);\n//  const response = await fetch(`${process.env.BACKEND_API_URL}/users/${userId}/points`, {\n//    method: 'PUT',\n//    headers: {\n//      'Content-Type': 'application/json',\n//      Authorization: `Bearer ${tokenJson}`,\n//    },\n//    body: JSON.stringify(req.body),\n//  });\n//  const data = await response.json();\n//  return NextResponse.json(data);\n//}\n\nexport async function PUT(req, { params }) {\n  const { userId } = params;\n  const cookieStore = cookies();\n  const token = cookieStore.get('token')?.value;\n\n  // guard clausee \n  if (!token) {\n    return NextResponse.json({ success: false, error: 'Falta el token', data: null });\n  }\n\n  let tokenJson;\n  try {\n    tokenJson = JSON.parse(token);\n  } catch (error) {\n    return NextResponse.json({ success: false, error: 'Token inválido', data: null });\n  }\n\n  const response = await fetch(`${process.env.BACKEND_API_URL}/users/${userId}/points`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${tokenJson}`,\n    },\n    body: JSON.stringify(req.body),\n  });\n\n  const data = await response.json();\n  return NextResponse.json(data);\n}"
          }
        }
      },
      "rewards": {
        "[id]": {
          "page.js": "'use client';\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport CoinsIcon from '/public/icons/coins.svg';\nimport useRewardStore from '@/app/stores/useRewardStore';\nimport Link from 'next/link';\nimport { buttonVariants } from \"@/components/ui/button\";\nimport TicketIcon from '/public/icons/ticket.svg';\nimport { useState } from 'react';\nimport { useSession } from \"next-auth/react\";\n\nfunction generateRandomCode() {\n  return Math.random().toString(36).substring(2, 10).toUpperCase();\n}\n\nexport default function RewardDetails({ params }) {\n  const router = useRouter();\n  const { data: session } = useSession();\n  const userId = session?.user?.id;\n\n  const { \n    selectedReward, \n    redeemReward, \n    userPoints, \n    setSelectedReward, \n    updateAfterRedemption \n  } = useRewardStore();\n  \n  const [redeemed, setRedeemed] = useState(false);\n\n  useEffect(() => {\n    if (!selectedReward) {\n      router.push('/rewards');\n    }\n  }, [selectedReward, router]);\n\n  if (!selectedReward) {\n    return null;\n  }\n\n  const handleRedeem = async () => {\n    if (userPoints >= selectedReward.cost) {\n      try {\n        const newPoints = userPoints - selectedReward.cost;\n        const response = await fetch(`/api/users/${userId}/points`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.user.token}`,\n          },\n          body: JSON.stringify({ points: newPoints }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || 'Error en la respuesta del servidor');\n        }\n\n        const updatedPoints = await response.json();\n        console.log('Canje exitoso, nuevos puntos:', updatedPoints);\n        \n        const redeemedCoupon = {\n          id: Date.now(),\n          discount: selectedReward.discount,\n          category: selectedReward.category,\n          redeemedAt: new Date().toISOString(),\n          expiration: selectedReward.expiration,\n          discountCode: generateRandomCode(),\n        };\n        \n        updateAfterRedemption(updatedPoints, redeemedCoupon);\n        setRedeemed(true);\n        setTimeout(() => {\n          router.push('/dashboard');\n        }, 2000);\n      } catch (error) {\n        console.error('Error al realizar el canje:', error);\n        alert(error.message || 'Error al procesar la solicitud. Por favor, intenta de nuevo más tarde.');\n      }\n    } else {\n      alert('No tienes suficientes puntos para canjear esta recompensa.');\n    }\n  };\n\n  return (\n    <div className=\"grid gap-6\">\n      <h1 className='text-3xl font-bold text-center'>Detalles de la Recompensa</h1>\n      <div className=\"flex flex-col items-center justify-between p-4 rounded-lg\">\n        <h4 className='text-xl text-center'>Puntos disponibles</h4>\n        <div className=\"flex items-center\">\n          <CoinsIcon className=\"w-6 h-6 text-[--color-primary]\" />\n          <p className=\"ml-2 text-3xl font-bold\">{userPoints}</p>\n        </div>\n      </div>\n      <div className=\"max-w-3xl p-6 mx-auto my-12 text-center text-white bg-gray-900 rounded-lg\">\n        <div className=\"flex justify-center mb-4\">\n          <TicketIcon className=\"w-12 h-12 text-[--color-primary]\"/>\n        </div>\n        <p className=\"text-xl font-bold\">{selectedReward.discount}</p>\n        <p className=\"text-sm\">{selectedReward.category}</p>\n        <p className=\"text-lg\">Valor del cupón: <span className=\"font-bold\">{selectedReward.cost} Puntos</span></p>\n        <p>Vencimiento: {selectedReward.expiration}</p>\n      </div>\n      {redeemed && (\n        <p className=\"text-center text-green-500\">¡Canje exitoso! Has canjeado la recompensa.</p>\n      )}\n\n      <div className='flex justify-center gap-4'>\n        <Link href=\"/rewards\" className={buttonVariants({ variant: \"secondary\", size: \"lg\", className: \"font-bold\" })}>Volver</Link>\n        <button onClick={handleRedeem} className={buttonVariants({ variant: \"default\", size: \"lg\", className: \"font-bold\" })}>Canjear</button>\n      </div>      \n    </div>\n  );\n}\n"
        }
      }
    }
  }
}