{
  "src": {
    "app": {
      "rewards": {
        "[id]": {
          "page.js": "'use client';\n\nimport CoinsIcon from '/public/icons/coins.svg';\nimport useRewardStore from '@/app/stores/useRewardStore';\nimport Link from 'next/link';\nimport { buttonVariants } from \"@/components/ui/button\";\nimport TicketIcon from '/public/icons/ticket.svg';\nimport { useEffect, useState } from 'react';\nimport { useSession } from \"next-auth/react\";\n\n\nexport default function RewardDetails() {\n  const { data: session } = useSession(); // Obtiene la sesión\n  const userId = session.user.userId; // Asegúrate de que esta propiedad exista\n\n  const { selectedReward, redeemReward, userPoints } = useRewardStore();\n  const [redeemed, setRedeemed] = useState(false); // Para mostrar un mensaje de confirmación\n\n  if (!selectedReward) {\n    return <p>No hay detalles de la recompensa disponibles</p>;\n  }\n\n  // const handleRedeem = () => {\n  //   if (userPoints >= selectedReward.cost) {\n  //     redeemReward(selectedReward.cost);  // Descuenta los puntos\n  //     setRedeemed(true);  // Muestra el mensaje de confirmación\n  //     console.log(\"Puntos después del canje:\", useRewardStore.getState().userPoints); // Verifica que los puntos se han actualizado\n  //   } else {\n  //     setRedeemed(false);  // En caso de no tener suficientes puntos\n  //   }\n  // };\n\n\n  const handleRedeem = async () => {\n    if (userPoints >= selectedReward.cost) {\n      // Lógica para canjear los puntos\n      redeemReward(selectedReward.cost);  // Descuenta los puntos\n      setRedeemed(true);  // Muestra el mensaje de confirmación\n      \n      const couponValue = selectedReward.cost; // valor del cupón\n      const couponValidity = selectedReward.expiration; // vigencia del cupón\n\n      console.log(\"Datos a enviar:\", {\n        userId,\n        totalPoints: userPoints,\n        couponValue,\n        couponValidity,\n      });\n  \n      // Realiza el fetch\n      const response = await fetch('/api/redeem', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId,\n          totalPoints: userPoints,\n          couponValue,\n          couponValidity,\n        }),\n      });\n  \n      if (response.ok) {\n        const data = await response.json();\n        console.log('Canje exitoso:', data);\n      } else {\n        console.error('Error en el canje:', response.statusText);\n      }\n  \n    } else {\n      setRedeemed(false);  // En caso de no tener suficientes puntos\n    }\n  };\n  \n\n  return (\n    <div className=\"grid gap-6\">\n      <h1 className='text-3xl text-center'>Detalles de la Recompensa</h1>\n      <div className=\"flex flex-col items-center justify-between p-4 rounded-lg\">\n        <h4 className='text-xl text-center'>Puntos disponibles</h4>\n        <div className=\"flex items-center\">\n          <CoinsIcon className=\"w-6 h-6 text-[--color-primary]\" />\n          <p className=\"ml-2 text-3xl font-bold\">{userPoints}</p>\n        </div>\n      </div>\n      <div className=\"max-w-3xl p-6 mx-auto my-12 text-center text-white bg-gray-900 rounded-lg\">\n      <div className=\"flex justify-center mb-4\">\n        <TicketIcon className=\"w-12 h-12 text-[--color-primary]\"/>\n      </div>\n      <p className=\"text-xl font-bold\">{selectedReward.discount}</p>\n      <p className=\"text-sm\">{selectedReward.category}</p>\n      <p className=\"text-lg\">Valor del cupon: <span className=\"font-bold\">{selectedReward.cost} Puntos</span></p>\n        {/* <p>Descuento: {selectedReward.discount}</p>\n        <p>Categoría: {selectedReward.category}</p>\n        <p>Detalles: {selectedReward.details}</p> */}\n        <p>Vencimiento: {selectedReward.expiration}</p>\n      </div>\n      {/* Mensaje de confirmación al canjear */}\n      {redeemed && (\n        <p className=\"text-center text-green-500\">¡Canje exitoso! Has canjeado la recompensa.</p>\n      )}\n\n      <div className='flex justify-center gap-4'>\n        <Link href=\"/rewards\" className={buttonVariants({ variant: \"secondary\", size: \"lg\", className: \"font-bold\" })}>Volver</Link>\n        <Link href=\"/dashboard\" onClick={handleRedeem} className={buttonVariants({ variant: \"default\", size: \"lg\", className: \"font-bold\" })}>Canjear</Link>\n      </div>      \n    </div>\n\n  );\n}\n"
        },
        "layout.js": "export default function RewardsLayout({ children }) {\n    return (\n      <div className=\"container mx-auto max-w-[600px] px-4 justify-center my-8 text-white\">\n        {children}\n      </div>\n    );\n  }",
        "page.js": "'use client';\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport CoinsIcon from '/public/icons/coins.svg';\nimport TicketIcon from '/public/icons/ticket.svg';\n\nexport default function RewardsPage() {\n  const rewards = [\n    { id: 1, discount: '15%', category: 'Supermercado Día', cost: 200, details: 'Detalles del cupón 1', expiration: '31/12/2024' },\n    { id: 2, discount: '20%', category: 'Supermercado Carrefour', cost: 300, details: 'Detalles del cupón 2', expiration: '30/11/2024' },\n    { id: 3, discount: '10%', category: 'Supermercado Coto', cost: 150, details: 'Detalles del cupón 3', expiration: '15/01/2025' },\n    { id: 4, discount: '25%', category: 'Veterinaria Los Amigos', cost: 400, details: 'Detalles del cupón 4', expiration: '20/12/2024' },\n    { id: 5, discount: '30%', category: 'Veterinaria Shrek', cost: 250, details: 'Detalles del cupón 5', expiration: '28/12/2024' },\n    { id: 6, discount: '20%', category: 'Pizzería El Hornito', cost: 300, details: 'Detalles del cupón 6', expiration: '10/12/2024' },\n    { id: 7, discount: '15%', category: 'Restaurante Tinta Roja', cost: 200, details: 'Detalles del cupón 7', expiration: '31/01/2025' },\n    { id: 8, discount: '10%', category: 'Tienda Solo Deportes', cost: 100, details: 'Detalles del cupón 8', expiration: '05/01/2025' },\n    { id: 9, discount: '5%', category: 'Tienda Movisar', cost: 50, details: 'Detalles del cupón 9', expiration: '20/01/2025' },\n  ];\n\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const filteredRewards = rewards.filter(reward =>\n    reward.category.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold text-center mb-8\">Recompensas</h1>\n      \n      <div className=\"bg-[--color-secundary] rounded-lg p-6 mb-8\">\n        <h2 className='text-xl font-semibold text-center mb-4'>Puntos disponibles</h2>\n        <div className=\"flex items-center justify-center\">\n          <CoinsIcon className=\"w-8 h-8 text-[--color-primary] mr-2\" />\n          <p className=\"text-4xl font-bold\">0</p>\n        </div>\n      </div>\n      \n      <div className=\"mb-8\">\n        <label htmlFor=\"search\" className='text-lg font-medium block mb-2'>Buscar recompensas</label>\n        <input\n          id=\"search\"\n          type=\"text\"\n          placeholder=\"Buscar por categoría...\"\n          className=\"border rounded-lg p-3 w-full bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredRewards.map((reward) => (\n          <Link\n            href={`/rewards/details/${reward.id}`}\n            key={reward.id}\n            className=\"p-6 transition-all bg-[--color-secundary] rounded-lg hover:bg-gray-700 flex flex-col items-center\"\n          >\n            <div className=\"mb-4\">\n              <TicketIcon className=\"w-16 h-16 text-[--color-primary]\" />\n            </div>\n            <p className=\"text-2xl font-bold mb-2\">{reward.discount}</p>\n            <p className=\"text-lg text-center\">{reward.category}</p>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n"
      },
      "stores": {
        "useRewardStore.js": "import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nconst useRewardStore = create(\n  persist(\n    (set) => ({\n      userPoints: 1000,  // Puntos iniciales del usuario\n      selectedReward: null,\n      setSelectedReward: (reward) => set({ selectedReward: reward }),\n\n      // Acción para descontar puntos\n      redeemReward: (pointsCost) => set((state) => ({\n        userPoints: state.userPoints - pointsCost\n      })),\n    }),\n    {\n      name: 'reward-storage', // Nombre del almacenamiento en localStorage\n      getStorage: () => localStorage, // Definir el uso de localStorage\n    }\n  )\n);\n\nexport default useRewardStore;\n"
      }
    },
    "auth": {
      "session-provider.jsx": "'use client'\n\nimport { SessionProvider as Provider } from \"next-auth/react\"\n\n\nexport default function SessionProvider({children}) {\n    return (\n    <Provider>\n        {children}\n    </Provider> \n    )\n}"
    }
  }
}